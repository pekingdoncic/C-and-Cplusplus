#include<iostream>
#include<cstring>
using namespace std;

class Book
{
private:
   char *name; 
   char *author; 
   int sale;       
public:
	Book();                               //无参构造函数
	Book(char *a, char *b, int c);        //有参构造函数
	Book(const Book &x);                  //拷贝构造函数
	void print();                         //显示数据
	~Book();                              //析构函数
};

Book::Book()
{
	name = new char[10];
	author = new char[10];
	strcpy(name,"No name");
	strcpy(author,"No author");
	sale = 0;
}

Book::Book(char *a, char *b, int c)
{
	name = new char[strlen(a)+1];
	author = new char[strlen(b)+1];
	strcpy(name,a);
	strcpy(author,b);
	sale = c;
}

Book::Book(const Book &x)
{
	name = new char[strlen(x.name)+1];
	author = new char[strlen(x.author)+1];
	strcpy(name,x.name);
	strcpy(author,x.author);
	sale = x.sale;
}

void Book::print()
{
	cout<<"Name: "<<name<<"\tAuthor: "<<author<<"\tSale: "<<sale<<endl;
}

Book::~Book()
{
	delete[] name;
	delete[] author;
}

int main()
{
	char Name[100];
	char Author[100];
	int Sale;
	gets(Name);
	gets(Author);
	cin>>Sale;
	
	if(strcmp(Name,"-1")==0 && strcmp(Author,"-1")==0 && Sale == -1)	
	{
		Book bk3;
		bk3.print();
	}
	else if(strcmp(Name,"0")==0 && strcmp(Author,"0")==0 && Sale == 0)
	{
		Book bk1;
		Book bk2(bk1);
		bk2.print();
	}
	else
	{
		Book bk1(Name,Author,Sale);
		bk1.print();
	}
	return 0;
}





#include<iostream>
#include<cstring>
using namespace std;
int total = 0,count = 1;
class Hotel
{
private:
	char *Name;
public:
	Hotel();
	void add(char *a);
	char* getName();
	void print();
	int getTotal();
	~Hotel();
};

Hotel::Hotel()
{
	Name = new char[100];
}

void Hotel::add(char *a)
{
	Name = new char[strlen(a)+1];
	strcpy(Name,a);
	++total;
}

char* Hotel::getName()
{
	return Name;
}

int Hotel::getTotal()
{
	return count++;
}

void Hotel::print()
{
	cout<<count-1<<" "<<Name<<" "<<total;
}

Hotel::~Hotel()
{
	delete[] Name;
}

int main()
{
	Hotel h[100];
	h[0].add("Susan");
	h[1].add("Peter");
	h[2].add("John");
	h[3].add("Mary");
	h[4].add("Alice");
	string name;
	cin>>name;
	for(int i=0;i<h[i].Hotel::getTotal();i++)
	{
		if(h[i].getName() == name)
		{
			h[i].print();
			break;
		}
	}
	return 0;
}





#include<iostream>
#include<stdio.h>
#include<math.h>
using namespace std;

class Date
{
private:
	int year;
	int month;
	int day;
public:
	Date();
	void input();
	friend int count(Date &d);
};

Date::Date()
{
	year = 0;
	month = 12;
	day = 31;
}

void Date::input()
{
	scanf("%d-%d-%d",&year,&month,&day);
	
}

int count(Date &y)
{
	int runnian = (y.year-1)/4-(y.year-1)/100+(y.year-1)/400;
	int tianshu;
	if(y.year%400==0 || (y.year%4==0 && y.year%100!=0))
	{
		if(y.month ==2 && y.day==31)
			tianshu = (y.year-1)*365 + runnian + 62;
		else
		{
			switch(y.month)
			{
				case(1):
					tianshu = (y.year-1)*365 + runnian + y.day;break;
				case(2): 
					tianshu = (y.year-1)*365 + runnian + 31 + y.day;break;
				case(3): 
					tianshu = (y.year-1)*365 + runnian + 60 + y.day;break;
				case(4): 
					tianshu = (y.year-1)*365 + runnian + 91 + y.day;break;
				case(5): 
					tianshu = (y.year-1)*365 + runnian + 121 + y.day;break;
				case(6): 
					tianshu = (y.year-1)*365 + runnian + 152 + y.day;break;
				case(7): 
					tianshu = (y.year-1)*365 + runnian + 182 + y.day;break;
				case(8): 
					tianshu = (y.year-1)*365 + runnian + 213 + y.day;break;
				case(9): 
					tianshu = (y.year-1)*365 + runnian + 244 + y.day;break;
				case(10): 
					tianshu = (y.year-1)*365 + runnian + 274 + y.day;break;
				case(11): 
					tianshu = (y.year-1)*365 + runnian + 305 + y.day;break;
				case(12): 
					tianshu = (y.year-1)*365 + runnian + 335 + y.day;break;
			};
		}
	}
	else
	{
		switch(y.month)
		{
			case(1):
				tianshu = (y.year-1)*365 + runnian + y.day;break;
			case(2): 
				tianshu = (y.year-1)*365 + runnian + 31 + y.day;break;
			case(3): 
				tianshu = (y.year-1)*365 + runnian + 59 + y.day;break;
			case(4): 
				tianshu = (y.year-1)*365 + runnian + 90 + y.day;break;
			case(5): 
				tianshu = (y.year-1)*365 + runnian + 120 + y.day;break;
			case(6): 
				tianshu = (y.year-1)*365 + runnian + 151 + y.day;break;
			case(7): 
				tianshu = (y.year-1)*365 + runnian + 181 + y.day;break;
			case(8): 
				tianshu = (y.year-1)*365 + runnian + 212 + y.day;break;
			case(9): 
				tianshu = (y.year-1)*365 + runnian + 243 + y.day;break;
			case(10): 
				tianshu = (y.year-1)*365 + runnian + 273 + y.day;break;
			case(11): 
				tianshu = (y.year-1)*365 + runnian + 304 + y.day;break;
			case(12): 
				tianshu = (y.year-1)*365 + runnian + 334 + y.day;break;
		}
	}
	return tianshu;
}

int main()
{
	Date date1,date2;
	date1.input();
	date2.input();
	cout<<fabs(count(date1) - count(date2));
	return 0;
}



#include<iostream>
#include<cstring>
using namespace std;

class Date
{
public:
	Date(int d = 0, int m = 0, int y = 0)	//构造函数
	{
		this->day = d;
		this->month = m;
		this->year = y;
	}
	int get_day() const		// 返回day
	{
		return day;
	}
	int get_month() const	//返回month
	{
		return month;
	}
	int get_year() const	// 返回year
	{
		return year;
	}
	static void set_default(int D, int M, int Y)
	{
		default_date.day = D;
		default_date.month = M;
		default_date.year = Y;
	}
	static int get_default_day() //返回缺省day
	{
		return default_date.get_day();
	}
	static int get_default_month()//返回缺省month
	{
		return default_date.get_month();
	}
	static int get_default_year()//返回缺省year
	{
		return default_date.get_year();
	}
	Date& add_year(int n);//加n年
	Date& add_month(int n);//加n月，考虑超过12月，考虑闰年
	Date& add_day(int n);//加n天，考虑进位月和年，考虑闰年
private:
	int day, month, year;
	static Date default_date; //初始化为 1901年1月1日
};
Date Date:: default_date(1,1,1901);//静态变量要在外部声明 

Date& Date::add_year(int n)
	{
		year = year + n;
		return *this;//key point
	}
Date& Date::add_month(int n)
	{
		month = month + n;
		while(1)
		{
			if(month>12)
			{
				month = month - 12;
				year++;
			}
			else
				break;
		}
		return *this;//key point
	}
Date& Date::add_day(int n)
	{
		day = day + n;
		while(1)
		{
			if(month==1||month==3||month==5||month==7||month==8||month==10)
			{
				if(day>31)
				{	
					day = day - 31;
					month++;
				}
				else
					break;
			}
			if(month==4||month==6||month==9||month==11)
			{
				if(day>30)
				{	
					day = day - 30;
					month++;
				}				
				else
					break;
			}
			if(month==2)
			{
				if(year%400==0 || (year%4==0 && year%100!=0))
				{
					if(day>29)
					{
						day = day - 29;
						month++;
					}
					else
						break;
				}
				else
				{
					if(day>28)
					{
						day = day - 28;
						month++;
					}
					else
						break;
				}
			}
			if(month==12)
			{
				if(day>31)
				{
					day = day - 31;
					year++;
					month = 1;
				}
				else
					break;
			}
		}
		return *this;//key point
	} 

int main()
{
	char type[110];
	int day,mon,year;
	int addday,addmon,addyear;
	while(cin>>type)
	{
		if(strcmp(type,"Date") == 0)
		{
			cin>>day>>mon>>year;
			Date mydate(day,mon,year);
			cin>>addday>>addmon>>addyear;
			mydate.add_day(addday).add_month(addmon).add_year(addyear);
			cout << mydate.get_day() << " " << mydate.get_month() << " " << mydate.get_year() << endl;
		}
		else if(strcmp(type,"defalutDate") == 0)
		{
			cout << Date::get_default_day() << " " << Date::get_default_month() << " " << Date::get_default_year() << endl;
		}
			else if(strcmp(type,"setdefaultDate") == 0)
			{
				cin>>day>>mon>>year;
				Date::set_default(day,mon,year);
				cout << Date::get_default_day() << " " << Date::get_default_month() << " " << Date::get_default_year() << endl;
			}
	}
	return 0;
}




#include<iostream>
#include<cmath>
using namespace std;

class Rational
{
private:
	int z; //分子
	int m; //分母
public:
	Rational(int a=0, int b=1)  //构造有理数分数，分子默认为0，分母默认为1
	{
		z = a;
		m = b;
	}
	friend Rational& yuefen(Rational& r); //约分函数对分数化简
	friend Rational operator+(const Rational &r1, const Rational &r2);
	friend Rational operator-(const Rational &r1, const Rational &r2);
	friend Rational operator*(const Rational &r1, const Rational &r2);
	friend Rational operator/(const Rational &r1, const Rational &r2);
	Rational & operator+=(const Rational &r2);
	Rational & operator-=(const Rational &r2);
	Rational & operator*=(const Rational &r2);
	Rational & operator/=(const Rational &r2);
	friend bool operator==(const Rational &, const Rational &);//判断两个有理数是否相等
	friend bool operator!=(const Rational &, const Rational &);//判断两个有理数是否不等
	friend ostream & operator<<(ostream &, const Rational &);
	friend istream & operator>>(istream &, Rational &);
};

Rational& yuefen(Rational& r)
{
	int z,m;
	z = r.z;
	m = r.m;
	int temp;
	if(z<m)
	{
		temp = z;
		z = m;
		m = temp;
	}
	while(m!=0)
	{
		temp = z % m;
		z = m;
		m = temp;
	}
	r.z /= z;
	r.m /= z;
	return r; 
}
Rational operator+(const Rational &r1, const Rational &r2)
{
	Rational x;
	x.z = r1.z * r2.m + r2.z * r1.m;
	x.m = r1.m * r2.m;
	return x;
}
Rational operator-(const Rational &r1, const Rational &r2)
{
	Rational x;
	x.z = r1.z * r2.m - r2.z * r1.m;
	x.m = r1.m * r2.m;
	return x;
}
Rational operator*(const Rational &r1, const Rational &r2)
{
	Rational x;
	x.z = r1.z * r2.z;
	x.m = r1.m * r2.m;
	return x;
}
Rational operator/(const Rational &r1, const Rational &r2)
{
	Rational x;
	x.z = r1.z * r2.m;
	x.m = r1.m * r2.z;
	return x;
}
Rational & Rational::operator+=(const Rational &r2)
{
	*this = *this + r2;
	return *this;
}
Rational & Rational::operator-=(const Rational &r2)
{
	*this = *this - r2;
	return *this;
}
Rational & Rational::operator*=(const Rational &r2)
{
	*this = *this * r2;
	return *this;
}
Rational & Rational::operator/=(const Rational &r2)
{
	*this = *this / r2;
	return *this;
}
bool operator==(const Rational &r1, const Rational &r2)
{
	if(r1.z==r2.z && r1.m==r2.m)
		return true;
	else
		return false;
}
bool operator!=(const Rational &r1, const Rational &r2)
{
	if(r1.z!=r2.z || r1.m!=r2.m)
		return true;
	else
		return false;
}
ostream & operator<<(ostream &stream, const Rational &r)
{
	if(r.z * r.m>0)
		stream<<fabs(r.z)<<"/"<<fabs(r.m);
	else
		stream<<"-"<<fabs(r.z)<<"/"<<fabs(r.m);
	return stream;
}
istream & operator>>(istream &stream, Rational &r)
{
	stream>>r.z>>r.m;
	return stream;	
}
int main()
{
	 Rational r1,r2,r3;
	 while(cin>>r1>>r2)
	 {
		 cout << "r1 = " << yuefen(r1) << "\n" << "r2 = " << yuefen(r2) << endl;
		 r3 = r1 + r2;
		 cout << "r1+r2 = " << yuefen(r3) << endl;
		 r3 = r1 - r2;
		 cout << "r1-r2 = " << yuefen(r3) << endl;
		 r3 = r1 * r2;
		 cout << "r1*r2 = " << yuefen(r3) << endl;
		 r3 = r1 / r2;
		 cout << "r1/r2 = " << yuefen(r3) << endl;
		 cout << (r1 == r2) << " " << (r1 != r2) << endl;
		 cout << yuefen(r1 += r2) << endl;
		 cout << yuefen(r1 -= r2) << endl;
		 cout << yuefen(r1 *= r2) << endl;
		 cout << yuefen(r1 /= r2) << endl;
	 }
	 return 0;
}






#include<iostream>
using namespace std;

class CheckedPtr
{
public:
	CheckedPtr(int * b, int * e) : beg(b), end(e), curr(b){}
	CheckedPtr & operator ++(); // prefix ++
	CheckedPtr & operator --(); // prefix --
	CheckedPtr   operator ++(int); // postfix ++
	CheckedPtr   operator --(int); // postfix --
	int * GetBeg();
	int * GetEnd();
	int * GetCurr();
private:
	int * beg;  // pointer to beginning of the array
	int * end;  // one past the end of the array
	int * curr; // current position within the array
};

CheckedPtr& CheckedPtr::operator ++()
{
	beg ++;
	curr ++;
	return *this;
}

CheckedPtr& CheckedPtr::operator --()
{
	curr --;
	return *this;	
}

CheckedPtr  CheckedPtr::operator ++(int)
{
	CheckedPtr y(*this);
	curr ++;
	return y;
}

CheckedPtr  CheckedPtr::operator --(int)
{
	CheckedPtr y(*this);
	curr --;
	return y;
}

int* CheckedPtr::GetBeg()
{
	return beg;
}

int* CheckedPtr::GetCurr()
{
	return curr;	
}

int* CheckedPtr::GetEnd()
{
	return end;
}

int main()
{
	int array[10] = {1,2,3,4,5,6,7,8,9,10};
	CheckedPtr cp(array, array+10);
	for(;cp.GetCurr()<cp.GetEnd();cp++)
		cout<<*cp.GetCurr()<<" ";
	cout<<endl;
	for(--cp;cp.GetCurr()>cp.GetBeg();cp--)
		cout<<*cp.GetCurr()<<" ";
	cout<<*cp.GetCurr()<<endl;
	return 0;
}





#include<iostream>
#include<cstring>
using namespace std;

class String
{
private:
	char * s;
public:
	String(){s = new char[1000];strcpy(s,"");}
	String(const char *);
	String(const String &);
	~String();
	String & operator=(const char *); 
	String & operator=(const String &);
	String operator+(const char *);
	String operator+(const String &);
	String & operator+=(const char *);
	String & operator+=(const String &);
	friend istream & operator>>(istream &, String &);
	friend ostream & operator<<(ostream &, const String &);
	friend bool operator==(const String &, const char *);
	friend bool operator==(const String &, const String &);
	friend bool operator!=(const String &, const char *);
	friend bool operator!=(const String &, const String &);
};

String::String(const char * x)
{
	s = new char[strlen(x)+1];
	strcpy(s , x);
}
String::String(const String & x)
{
	s = new char[strlen(x.s)+1];  //keypoint
	strcpy(s , x.s);  //keypoint
}
String::~String()
{
	delete[] s;
}
String & String::operator=(const char *x)
{
	strcpy(s , x);
	return *this;
}
String & String::operator=(const String &x)
{
	strcpy(s , x.s);
	return *this;
}
String String::operator+(const char *x)
{
	String y;
	strcat(y.s,x);
	return y;
}
String String::operator+(const String &x)
{
	String y;
	strcat(y.s,x.s);
	return y;	
}
String & String::operator+=(const char *x)
{
	strcat(s,x);
	return *this;
}
String & String::operator+=(const String &x)
{	
	strcat(s,x.s);
	return *this;
}
istream & operator>>(istream &in, String &x)
{
	in>>x.s;
	return in;
}
ostream & operator<<(ostream &out, const String &x)
{
	out<<x.s;
	return out;
}
bool operator==(const String &x, const char *y)
{
	if(strcmp(x.s,y)==0)
		return true;
	else
		return false;
}
bool operator==(const String &x, const String &y)
{
	if(strcmp(x.s , y.s)==0)
		return true;
	else
		return false;	
}
bool operator!=(const String &x, const char *y)
{
	if(strcmp(x.s , y)!=0)
		return true;
	else
		return false;
}
bool operator!=(const String &x, const String &y)
{
	if(strcmp(x.s , y.s)!=0)
		return true;
	else
		return false;
}

int main()
{
	String s;
	s += "hello";
	cout<<s<<endl;
	String s1("String1");
	String s2("copy of ");
	s2 += "String1";
	cout << s1 << "\n" << s2 << endl;
	String s3;
	cin >> s3;
	cout << s3 << endl;
	String s4("String4"), s5(s4);
	cout << (s5 == s4) << endl;
	cout << (s5 != s4) << endl;
	String s6("End of "), s7("my string.");
	s6 += s7;
	cout << s6 << endl;
	return 0;
}





#include<iostream>
using namespace std;

template <typename T, size_t N>
void input(T (&parm)[N])		//ÒýÓÃ´«µÝÊý×é 
{
	for(size_t i=0;i!=N;i++)
	{
		cin>>parm[i];
	}
}

template <typename T, size_t N>
void sort(T (&parm)[N])		//ÒýÓÃ´«µÝÊý×é 
{
	T temp;
	for(size_t i=1;i<N;i++)
	{
		for(size_t j=0;j<N-1;j++)
		{
			if(parm[j]>parm[j+1])
			{
				temp = parm[j];
				parm[j] = parm[j+1];
				parm[j+1] = temp;
			}
		}
	}
	
}

template <typename T, size_t N>
void output(T (&parm)[N])		// 引用传递数组
{ 
	for(size_t i=0;i!=N;i++)
	{
		cout<<parm[i]<<" ";
	}
	cout<<endl;
}

int main()
{
 int a1[5];
 char a2[5];
 double a3[5];
 int type;
 while (cin >> type) 
{
  switch (type)
 {
   case 0: input(a1); sort(a1); output(a1); break;
   case 1: input(a2); sort(a2); output(a2); break;
   case 2: input(a3); sort(a3); output(a3); break;
 }
}
 return 0;
}





#include<iostream>
#include<stdlib.h>
using namespace std;

template<class T, int SIZE = 20>
class Stack
{
private: 
	T array[SIZE];       //数组，用于存放栈的元素
	int top;             //栈顶位置（数组下标）
public:
	Stack()					//构造函数，初始化栈
	{
		top = -1;
	}               
	void push(const T & x) //元素入栈
	{
		if(top != SIZE-1)
		{
			++top;
			array[top] = x;
		}
	}
	T pop()              //栈顶元素出栈
	{
		if(top != -1)
		{
			return array[top--];
		}
		else
			exit(1);
	}
	void clear()         //将栈清空
	{
		top = -1;	
	}
	const T & Top() const  //访问栈顶元素
	{
		if(top != -1)
			return array[top];
		else
			exit(1);
	}
	bool empty() const     //测试栈是否为空
	{
		return (top == -1);
	}
	bool full() const     //测试是否栈满
	{
		return (top == SIZE - 1);
	}
	int size()            //返回当前栈中元素个数
	{
		return top+1;
	}
};

int main()
{
	Stack<int,10> intStack;
	for(int i=0;i<10;i++)
		intStack.push(i);
	if(intStack.full()) 
		cout<<"Now, intStack is full."<<endl;
	for(int i=0;i<10;i++)
		cout<<intStack.Top()<<" ";
	cout<<endl;
	for(int i=0;i<10;i++)
		cout<<intStack.pop()<<" ";
	cout<<endl;
	if(intStack.empty()) 
		cout<<"Now, intStack is empty."<<endl;
	Stack<string,5> stringStack;
	stringStack.push("One");
	stringStack.push("Two");
	stringStack.push("Three");
	stringStack.push("Four");
	stringStack.push("Five");
	cout<<"There are "<<stringStack.size()<<" elements in stringStack."<<endl;
	stringStack.clear();
	if(stringStack.empty()) 
		cout<<"Now, there are no elements in stringStack"<<endl;
	return 0;
} 





#include<iostream>
#include<stdlib.h>
using namespace std;

template <class T>
class List
{
private:
	T data;
	List * next;
	static List * tail;      //Ö¸Ïò×îºóÒ»¸ö½áµã
	static List * head;      //Ö¸ÏòÍ·½áµã
public:
	List():next(NULL) {head = tail = this;}        //¹¹ÔìÍ·½áµã
	List(T newnode):data(newnode),next(NULL){}    //¹¹ÔìÐÂ½áµã
	void append(T node);               //ÍùºóÃæÌí¼Ó½áµã
	bool insert(T node, T posnode);   //ÔÚ½áµãposnodeµÚÒ»´Î³öÏÖµÄºóÃæ²åÈëÐÂ½áµãnode, ²åÈë³É¹¦·µ»Øtrue£¬·ñÔòfalse
	void deleteNode(T node);          //É¾³ý½áµã,×¢Òâ¿ÉÄÜÓÐ¶à¸öÖµÏàÍ¬µÄ½áµãÐèÒªÉ¾³ý
	void delList();                   //É¾³ýÕû¸öÁ´±í
	void dispList();                  //ÏÔÊ¾Á´±í
};
template <class T>
List<T> * List<T>::tail;

template <class T>
List<T> * List<T>::head;

template <class T>
void List<T>::append(T node)	//append:Ìí¼Ó£¬¸½¼Ó	 £» node:½Úµã 
{
	tail->next = new List(node);
	tail = tail->next;
}

template <class T>
bool List<T>::insert(T node,T posnode)
{
	List *p = head->next;
	List *n = new List(node);
	while(p)
	{
		if(p->next == NULL && p->data == posnode)
		{
			append(node);
			return true;
		}	
		if(p->next != NULL && p->data == posnode)
		{
			n->next = p->next;
			p->next = n;
			return true;
		}
		p = p->next;
	}
	return false;
}

template <class T>
void List<T>::deleteNode(T node)
{
	List<T> *find = head->next , *pre = head;	
	while(find)
	{
		if(find->next == NULL && find->data == node)
		{
			tail = pre;
			pre->next = NULL;
			delete find;
			find = NULL;
		}
		else if(find->next != NULL && find->data == node)
		{
			pre->next = find->next;
			delete find;
			find = pre->next;
		}
		else
		{
			pre =find;
			find=find->next;
		}
	}
}

template <class T>
void List<T>::delList()
{
	List *p = head->next;
	while(p)
	{
		List *q = p;
		head->next = p->next;
		p = p->next;
		delete q;
	}	
}

template <class T>
void List<T>::dispList()
{
	List<T> *p = head->next;
	while(p)
	{
		cout<<p->data<<" ";
		p = p->next;
	}
	cout<<endl;
}

int main()
{
	List<int> list1;
	list1.append(1);
	list1.deleteNode(1);
	list1.append(2);
	list1.append(3);
	list1.append(4);
	list1.insert(10,2);
	list1.append(5);
	list1.append(3);
	list1.append(3);
	list1.dispList();
	list1.deleteNode(3); 
	list1.dispList();
	list1.delList();
	list1.dispList();
	
	List<char> list2;
	list2.append('A');
	list2.append('B');
	list2.append('C');
	list2.append('D');
	list2.insert('E','B');
	list2.insert('F','D');
	list2.append('G');
	list2.append('G');
	list2.append('G');
	list2.dispList();
	list2.deleteNode('G');
	list2.dispList();
	list2.delList();
	list2.dispList();
	return 0;
}





#include<iostream>
#include<stdlib.h> 
#include<fstream>
using namespace std;

int main()
{
	fstream file;	//输入文件流对象
	file.open("colors.txt",ios::in);
	if(!file)
	{
		cout<<"can't open the colors file!"<<endl;
		exit(0);
	}
	fstream tempfile;	//输出文件流对象
	tempfile.open("temp.txt",ios::out | ios::in | ios::trunc);
	if(!tempfile)
	{
		cout<<"can't open the temp file!"<<endl;
		exit(0);
	}
	char str[100];
	int i=1;
	while(!file.eof())
	{
		file.getline(str,100);	//将一行的内容提取到str数组中 
		tempfile<<i<<' '<<str<<"\n";
		i++;
	}
	file.close();
	file.open("colors.txt",ios::out);
	if(!file)
	{
		cout<<"can't open the file!";
		exit(0);
	}
	tempfile.seekp(0);	//将tempfile的指针指向开头0 
	while(!tempfile.eof())
	{
		tempfile.getline(str,100);
		file<<str<<"\n";
	}
	file.close();
	tempfile.close();
	return 0;
}





#include<iostream>
#include<stdlib.h>
#include<fstream>
using namespace std;

int main()
{
	fstream file;
	file.open("colors.txt",ios::in);
	if(!file)
	{
		cout<<"can't open the color file!"<<endl;
		exit(0);
	}
	int line=1,word=0;
	char ch;
	while(!file.eof())
	{
		file.get(ch);
		if(ch==' ')
			word++;
		if(ch=='\n')
			line++;
	}
	cout<<"lines = "<<line<<endl;
	cout<<"words = "<<word+line<<endl;
	file.close();
	return 0;
}






#include<iostream>
#include<stdlib.h>
#include<fstream>
using namespace std;

int main()
{
	fstream file1,file2;
	file1.open("in.txt",ios::in);
	file2.open("out.txt",ios::out);
	if(!file1)
	{
		cout<<"can't open the IN file!"<<endl;
		exit(0);
	}
	if(!file2)
	{
		cout<<"can't open the OUT file!"<<endl;
		exit(0);
	}
	int n,m,a[20];
	while(file1>>n)
	{
		for(int i=0;i<n;i++)
			file1>>a[i];
		file1>>m;
		int num=0;
		for(int i=0;i<n;i++)
			if(a[i]<m)
				num++;
		file2<<num<<" ";
	}
	file1.close();
	file2.close();
	return 0;
}





#include<iostream>
#include<stdlib.h>
#include<fstream>
using namespace std;

int main()
{
	fstream file1,file2;
	file1.open("colors1.txt",ios::app|ios::out);
	file2.open("colors2.txt",ios::in);
	if(!file1)
	{
		cout<<"can't open the colors1 file!"<<endl;
		exit(0);
	}
	if(!file2)
	{
		cout<<"can't open the colors2 file!"<<endl;
		exit(0);
	}
	char str[100];
	while(!file2.eof())
	{
		file2.getline(str,100);
		file1<<str<<"\n";	
	}
	file1.close();
	file2.close();
	return 0;
}